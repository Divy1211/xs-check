use tower_lsp::lsp_types::ConfigurationItem;

use xsc_core::r#static::info::WarningKind;

use crate::config::ext_config::ExtConfig;
use crate::config::flavour::Flavour;

#[allow(non_snake_case)]
#[derive(Debug, serde::Deserialize)]
struct JsonConfig {
    ignores: Vec<String>,
    extraPreludePath: Option<String>,
    includeDirectories: Vec<String>,
    flavour: String,
}

pub async fn fetch_config(client: &tower_lsp::Client) -> anyhow::Result<ExtConfig> {
    let items = vec![ConfigurationItem {
        section: Some("xsc".to_string()),
        scope_uri: None,
    }];

    let config_values = client.configuration(items).await?;

    let Some(value) = config_values.get(0) else {
        anyhow::bail!("No configuration found");
    };
    let config: JsonConfig = serde_json::from_value(value.clone())?;

    let ignores = config.ignores.iter()
        .map(|s| {
            WarningKind::from_str(s)
                .expect("Error names generated by enum")
                .as_u32()
        })
        .collect();
    let extra_prelude_path = config.extraPreludePath.map(|s| s.into());
    let include_dirs = config.includeDirectories.into_iter().map(|s| s.into()).collect();
    let flavour = Flavour::from_str(&config.flavour)
        .expect("Flavour name generated by enum");

    Ok(ExtConfig {
        ignores,
        extra_prelude_path,
        include_dirs,
        flavour,
    })
}